version: '3.8'

services:
  webrtc-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: webrtc-server
    ports:
      - "8090:8090"  # WebSocket signaling
      - "3478:3478"  # STUN/TURN
      - "3478:3478/udp"
      - "49152-65535:49152-65535/udp"  # RTP/RTCP port range
    environment:
      - RUST_LOG=info
      - KAFKA_BROKERS=kafka-1:29092,kafka-2:29093,kafka-3:29094
      - REDIS_URL=redis://redis-cluster:6379
      - MAX_CONNECTIONS=1000
      - MAX_BITRATE_KBPS=15000
      - TARGET_FPS=30
    depends_on:
      - redis-cluster
    networks:
      - streaming-network
    restart: unless-stopped
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Redis for session management
  redis-cluster:
    image: redis:7-alpine
    container_name: redis-cluster
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - streaming-network
    restart: unless-stopped

  # TURN server for NAT traversal
  coturn:
    image: coturn/coturn:latest
    container_name: coturn-server
    ports:
      - "3478:3478"
      - "3478:3478/udp"
      - "5349:5349"
      - "5349:5349/udp"
      - "49152-65535:49152-65535/udp"
    environment:
      - TURN_USERNAME=videouser
      - TURN_PASSWORD=videopass123
      - TURN_REALM=video-rss.local
    command: >
      turnserver
      --listening-port=3478
      --tls-listening-port=5349
      --alt-listening-port=3479
      --alt-tls-listening-port=5350
      --min-port=49152
      --max-port=65535
      --verbose
      --fingerprint
      --lt-cred-mech
      --user=videouser:videopass123
      --realm=video-rss.local
      --log-file=stdout
      --simple-log
    networks:
      - streaming-network
    restart: unless-stopped

  # Load balancer for multiple WebRTC instances
  nginx-lb:
    image: nginx:alpine
    container_name: webrtc-loadbalancer
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - webrtc-server
    networks:
      - streaming-network
    restart: unless-stopped

  # Monitoring and metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: webrtc-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - streaming-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: webrtc-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - streaming-network
    restart: unless-stopped

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  streaming-network:
    external: true